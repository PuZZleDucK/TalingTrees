<div class="flex h-screen bg-gray-100 p-6 gap-6">
  <div class="flex-1 p-4 bg-white rounded-lg shadow-md flex flex-col">
    <section class="py-6 px-4 bg-white rounded-lg shadow mb-4">
      <h1 class="text-4xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-green-400 to-blue-500">Trees Nearby</h1>
    </section>
    <div class="h-1/4 overflow-y-auto mb-4 bg-white border border-gray-200 rounded-lg p-4">
      <ul id="tree-list" class="list-none p-0 m-0">
      <% @trees.each_with_index do |tree, idx| %>
        <li data-index="<%= idx %>" class="cursor-pointer p-4 bg-white rounded-lg shadow hover:shadow-lg transition mb-2">
          <%= tree.name %>
        </li>
      <% end %>
      </ul>
    </div>

    <div id="map" class="h-96 bg-white border border-gray-200 rounded-lg shadow-md mb-4"></div>
  </div>
  <div class="flex-1 flex flex-col bg-white rounded-lg shadow-md p-4">
    <button id="back-button" class="hidden mb-2 bg-gray-200 rounded px-2 py-1 text-sm self-start"></button>
    <div class="flex items-center mb-2 relative">
      <span class="text-2xl mr-2">ðŸ’¬</span>
      <h2 id="chat-title" class="m-0 text-xl">
        <span id="chat-title-name">Chat</span>
        (<span id="neighbor-info" class="hover:underline cursor-pointer"><span id="neighbor-count">0/0</span> neighbors</span> -
        <span id="friend-info" class="hover:underline cursor-pointer"><span id="friend-count">0/0</span> friends</span> -
        <span id="species-info" class="hover:underline cursor-pointer"><span id="species-count">0/0</span> same species</span>)
      </h2>
      <div id="relation-dropdown" class="hidden absolute left-0 top-full mt-1 bg-white border rounded shadow p-2 text-sm z-10"></div>
    </div>
    <div class="flex items-center mb-2">
      <div id="tree-tags" class="flex flex-wrap text-sm text-gray-600"></div>
      <div class="relative ml-2">
        <button id="tag-dropdown-btn" class="bg-gray-200 rounded px-2 py-1">+ Tag</button>
        <div id="tag-dropdown" class="hidden absolute left-0 mt-1 bg-white border rounded shadow z-10">
          <% TreeTag::ALLOWED_TAGS.each do |t| %>
            <div class="tag-option px-3 py-1 cursor-pointer hover:bg-gray-100" data-tag="<%= t %>"><%= t %></div>
          <% end %>
        </div>
      </div>
    </div>
    <div id="chat-history" class="bg-gray-50 rounded-lg shadow-inner p-4 mb-4 min-h-32">
      <!-- Chat messages will appear here -->
    </div>
    <div class="flex">
      <input type="text" id="chat-input" class="flex-1 border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="Type a message...">
      <button id="chat-submit" class="ml-2 bg-indigo-500 hover:bg-indigo-600 text-white font-bold rounded-lg px-6 py-3 transition">Send</button>
    </div>
  </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<style>
  #tree-list li.selected { background-color: #e0f0ff; }
  #tag-dropdown { min-width: 6rem; }
  #chat-history {
    min-height: 8rem;
    max-height: 50vh;
  }
  #chat-history .user-message {
    background-color: #e0ffe0;
    padding: 5px 8px;
    border-radius: 4px;
    margin: 4px 0;
    max-width: 70%;
    display: block;
    width: fit-content;
    margin-left: auto;
  }
  #chat-history .bot-message {
    background-color: #f0e0d0;
    padding: 5px 8px;
    border-radius: 4px;
    margin: 4px 0;
    max-width: 70%;
    display: block;
    width: fit-content;
    margin-right: auto;
  }
  #chat-history details pre {
    white-space: pre-wrap;
    margin: 0;
  }
  #chat-history .tree-name {
    font-weight: bold;
    color: #006400;
  }
  #chat-history .tree-name:hover {
    cursor: pointer;
    text-decoration: underline;
  }
  #chat-history .locked-thoughts {
    color: #888;
    font-style: italic;
  }
  #relation-dropdown div {
    padding: 2px 4px;
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    function csrfToken() {
      var meta = document.querySelector('meta[name="csrf-token"]');
      return meta ? meta.content : '';
    }
    var trees = <%= raw @tree_data.to_json %>;
    var allTrees = <%= raw Tree.where.not(name: [nil, '']).to_json(only: [:id, :name]) %>;
    var treeNameMap = {};
    allTrees.forEach(function(t){ treeNameMap[t.name.toLowerCase()] = t.id; });
    var namesRegex = new RegExp('\\b(' + allTrees.map(function(t){return t.name.replace(/[.*+?^${}()|[\\]\\]/g, '\\$&');}).join('|') + ')\\b', 'gi');
    var first = trees[0];
    var lat = first ? first.treedb_lat : 0;
    var lng = first ? first.treedb_long : 0;
    var map = L.map('map').setView([lat, lng], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Map data Â© OpenStreetMap contributors'
    }).addTo(map);
    var markers = [];
    var currentTreeId = null;
    var chatHistory = [];
    var currentChatId = null;
    var treeTags = document.getElementById('tree-tags');
    var neighborInfo = document.getElementById('neighbor-info');
    var friendInfo = document.getElementById('friend-info');
    var speciesInfo = document.getElementById('species-info');
    var relationDropdown = document.getElementById('relation-dropdown');
    var backButton = document.getElementById('back-button');
    var lastTreeId = null;
    var relationCircles = [];
    var relationLines = [];
    var radiusCircle = null;
    var userCircle = null;
    var userMarker = null;

    var userIcon = L.icon({
      iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
      shadowUrl: 'https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    });

    var locationInfo = document.getElementById('location-info');
    if (locationInfo) {
      var initLat = parseFloat(locationInfo.dataset.lat);
      var initLon = parseFloat(locationInfo.dataset.long);
      if (!isNaN(initLat) && !isNaN(initLon)) {
        userMarker = L.marker([initLat, initLon], {icon: userIcon}).addTo(map);
      }
    }

    function distanceMeters(lat1, lon1, lat2, lon2) {
      var rad = Math.PI / 180;
      var dLat = (lat2 - lat1) * rad;
      var dLon = (lon2 - lon1) * rad;
      var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * rad) * Math.cos(lat2 * rad) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return 6371000 * c;
    }

    function countNeighbors(tree, radius) {
      return trees.filter(function(t){
        if (t === tree) return false;
        if (!t.treedb_lat || !t.treedb_long) return false;
        return distanceMeters(tree.treedb_lat, tree.treedb_long,
                              t.treedb_lat, t.treedb_long) <= radius;
      }).length;
    }

    function escapeHtml(text) {
      var div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function highlightContent(text) {
      var escaped = escapeHtml(text);
      return escaped.replace(namesRegex, function(m) {
        var id = treeNameMap[m.toLowerCase()];
        return '<span class="tree-name font-bold text-green-600" data-tree-id="' + id + '">' + m + '</span>';
      });
    }

    var tagColors = {
      good: 'bg-green-200 text-green-800',
      funny: 'bg-yellow-200 text-yellow-800',
      friendly: 'bg-blue-200 text-blue-800',
      unique: 'bg-purple-200 text-purple-800'
    };

    function renderTags(counts, userTags) {
      treeTags.innerHTML = '';
      Object.keys(counts || {}).forEach(function(tag) {
        var span = document.createElement('span');
        var cls = tagColors[tag] || 'bg-gray-200 text-gray-800';
        span.className = 'tag-pill inline-flex items-center px-2 py-1 mr-1 mb-1 rounded-full text-xs ' + cls;
        span.dataset.tag = tag;
        var count = counts[tag];
        span.textContent = count > 1 ? tag + ' (' + count + ')' : tag;
        if (Array.isArray(userTags) && userTags.indexOf(tag) !== -1) {
          var trash = document.createElement('span');
          trash.className = 'delete-tag cursor-pointer ml-1';
          trash.textContent = 'ðŸ—‘';
          span.appendChild(trash);
        }
        treeTags.appendChild(span);
      });
    }
    function pulseHighlight(lat, lon) {
      var maxRadius = 50;
      var ring = L.circle([lat, lon], {radius: 0, color: "#00ff00", weight: 2, fillOpacity: 0}).addTo(map);
      var start = Date.now();
      var duration = 1500;
      var pulses = 0;
      var interval = setInterval(function(){
        var elapsed = Date.now() - start - pulses * duration;
        var progress = elapsed / duration;
        if (progress >= 1) {
          pulses++;
          if (pulses >= 2) {
            clearInterval(interval);
            map.removeLayer(ring);
            return;
          }
          progress -= 1;
        }
        var radius = maxRadius * progress;
        ring.setRadius(radius);
        var opacity = 1 - progress;
        ring.setStyle({opacity: opacity, fillOpacity: 0.4 * opacity});
      }, 50);
    }


    function addTag(tag) {
      fetch('/trees/' + currentTreeId + '/tag', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken()
        },
        body: JSON.stringify({ tag: tag })
      }).then(function(resp){ return resp.json(); }).then(function(data){
        renderTags(data.tag_counts || {}, data.user_tags || []);
        var tree = trees.find(function(t){ return t.id === currentTreeId; });
        if (tree) {
          tree.tag_counts = data.tag_counts || {};
          tree.user_tags = data.user_tags || tree.user_tags || [];
        }
      });
    }

    function removeTag(tag) {
      fetch('/trees/' + currentTreeId + '/tag', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken()
        },
        body: JSON.stringify({ tag: tag })
      }).then(function(resp){ return resp.json(); }).then(function(data){
        renderTags(data.tag_counts || {}, data.user_tags || []);
        var tree = trees.find(function(t){ return t.id === currentTreeId; });
        if (tree) {
          tree.tag_counts = data.tag_counts || {};
          tree.user_tags = data.user_tags || tree.user_tags || [];
        }
      });
    }

    treeTags.addEventListener('click', function(e) {
      var pill = e.target.closest('.tag-pill');
      if (!pill) return;
      var tag = pill.dataset.tag;
      if (!tag) return;
      if (e.target.classList.contains('delete-tag')) {
        removeTag(tag);
      } else {
        addTag(tag);
      }
    });

    var userTagsDiv = document.getElementById('user-tags');
    var userTagRegex = /user_tag:([a-zA-Z_-]+)/gi;

    function renderUserTags(details) {
      if (!userTagsDiv) return;
      userTagsDiv.innerHTML = '';
      if (Array.isArray(details)) {
        var counts = {};
        details.forEach(function(tag){
          if (!counts[tag]) counts[tag] = { count: 0, names: [] };
          counts[tag].count += 1;
        });
        details = counts;
      }
      Object.keys(details || {}).forEach(function(tag){
        var info = details[tag] || {};
        var span = document.createElement('span');
        var cls = tagColors[tag] || 'bg-gray-200 text-gray-800';
        span.className = 'tag-pill inline-block px-2 py-1 mr-1 mb-1 rounded-full text-xs ' + cls;
        if (Array.isArray(info.names) && info.names.length > 0) {
          span.title = info.names.join(', ');
        }
        var count = info.count || 1;
        span.textContent = count > 1 ? tag + ' (' + count + ')' : tag;
        userTagsDiv.appendChild(span);
      });
    }

    function recordUserTags(text) {
      var match;
      while ((match = userTagRegex.exec(text)) !== null) {
        var tag = match[1];
        fetch('/trees/' + currentTreeId + '/tag_user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': csrfToken()
          },
          body: JSON.stringify({ tag: tag })
        }).then(function(resp){ return resp.json(); }).then(function(data){
          renderUserTags(data.tag_details || data.tags || []);
          var tree = trees.find(function(t){ return t.id === currentTreeId; });
          if (tree) { tree.user_tags = data.user_tags || tree.user_tags || []; }
          reRenderBotMessages();
        });
      }
      userTagRegex.lastIndex = 0;
    }

    function recordKnownTrees(text) {
      var match;
      var newIds = [];
      while ((match = namesRegex.exec(text)) !== null) {
        var id = treeNameMap[match[0].toLowerCase()];
        if (!trees.some(function(t){ return t.id === id; })) {
          newIds.push(id);
        }
        fetch('/know_tree/' + id, {
          method: 'POST',
          headers: { 'X-CSRF-Token': csrfToken() }
        });
      }
      namesRegex.lastIndex = 0;
      if (newIds.length > 0) {
        revealNewTrees(newIds);
      }
    }

    function revealNewTrees(ids) {
      var center = map.getCenter();
      var bounds = map.getBounds();
      var shift = (bounds.getNorth() - bounds.getSouth()) * 0.1;
      var offsetCenter = L.latLng(center.lat + shift, center.lng);
      var finalZoom = 13;
      var overshoot = finalZoom - 1;
      map.flyTo(offsetCenter, overshoot, {animate: true});
      setTimeout(function(){
        map.flyTo(offsetCenter, finalZoom, {animate: true});
      }, 500);
      return Promise.all(ids.map(function(id){
        return fetch('/trees/' + id + '.json')
          .then(function(resp){ return resp.json(); });
      })).then(function(newTrees){
        newTrees.forEach(function(tree){
          trees.push(tree);
          var idx = trees.length - 1;
          var li = document.createElement('li');
          li.dataset.index = idx;
          li.className = 'cursor-pointer p-1';
          li.textContent = tree.name;
          li.addEventListener('click', function(){ selectTree(idx); });
          document.getElementById('tree-list').appendChild(li);
          if (tree.treedb_lat && tree.treedb_long) {
            var m = L.marker([tree.treedb_lat, tree.treedb_long])
                      .addTo(map).bindPopup(tree.name);
            m.on('click', function(){ selectTree(idx); });
            markers[idx] = m;

            // Highlight new tree with a green radius and show its name
            m.openPopup();
            pulseHighlight(tree.treedb_lat, tree.treedb_long);
          } else {
            markers[idx] = null;
          }
          tree.tag_counts = tree.tag_counts || {};
          tree.user_tags = tree.user_tags || [];
          tree.neighbors = tree.neighbors || [];
          tree.friends = tree.friends || [];
          tree.same_species = tree.same_species || [];
        });
      });
    }

      function renderBotMessage(div, content) {
        var openIdx = content.indexOf('<think>');
        if (openIdx === -1) {
          div.innerHTML = highlightContent(content);
          return;
        }
        var closeIdx = content.indexOf('</think>', openIdx + 7);
        var before = content.slice(0, openIdx);
        var think = closeIdx === -1 ? content.slice(openIdx + 7) : content.slice(openIdx + 7, closeIdx);
        var after = closeIdx === -1 ? '' : content.slice(closeIdx + 8);
        var html = '';
        if (before) html += highlightContent(before);
        var tree = trees.find(function(t){ return t.id === currentTreeId; });
        var friendly = tree && Array.isArray(tree.user_tags) && tree.user_tags.indexOf('friendly') !== -1;
        if (friendly) {
          html += '<details><summary>LLM thoughts</summary><pre>' + escapeHtml(think) + '</pre></details>';
        } else {
          html += '<div class="locked-thoughts">LLM thoughts (requires friendly tag)</div>';
        }
        if (after) html += highlightContent(after);
        div.innerHTML = html;
      }

      function reRenderBotMessages() {
        chatHistory.forEach(function(msg) {
          if (msg.role === 'assistant' && msg.div) {
            renderBotMessage(msg.div, msg.content);
          }
        });
      }

      function refreshCurrentTree() {
        if (!currentTreeId) return;
        fetch('/trees/' + currentTreeId + '.json')
          .then(function(resp){ return resp.json(); })
          .then(function(data){
            var tree = trees.find(function(t){ return t.id === currentTreeId; });
            if (tree) {
              tree.user_tags = data.user_tags || [];
              tree.tag_counts = data.tag_counts || {};
              tree.neighbor_total = data.neighbor_total;
              tree.neighbor_known = data.neighbor_known;
              tree.friend_total = data.friend_total;
              tree.friend_known = data.friend_known;
              tree.species_total = data.species_total;
              tree.species_known = data.species_known;
              tree.neighbors = data.neighbors || [];
              tree.friends = data.friends || [];
              tree.same_species = data.same_species || [];
            }
            renderTags(data.tag_counts || {}, data.user_tags || []);
            if (tree) {
              document.getElementById('chat-title-name').textContent = tree.name;
              document.getElementById('neighbor-count').textContent = tree.neighbor_known + '/' + tree.neighbor_total;
              document.getElementById('friend-count').textContent = tree.friend_known + '/' + tree.friend_total;
              document.getElementById('species-count').textContent = tree.species_known + '/' + tree.species_total;
            }
            reRenderBotMessages();
            showRelationHighlights();
          });
      }

      function updateBackButton() {
        if (!backButton) return;
        if (lastTreeId) {
          var t = trees.find(function(tr){ return tr.id === lastTreeId; });
          if (t) {
            backButton.textContent = 'Back to ' + t.name;
            backButton.classList.remove('hidden');
            return;
          }
        }
        backButton.classList.add('hidden');
      }

      function clearRelationHighlights() {
        relationCircles.forEach(function(c){ map.removeLayer(c); });
        relationLines.forEach(function(l){ map.removeLayer(l); });
        relationCircles = [];
        relationLines = [];
      }

      function showRelationHighlights() {
        clearRelationHighlights();
        if (!currentTreeId) return;
        var tree = trees.find(function(t){ return t.id === currentTreeId; });
        if (!tree) return;
        var idx = trees.indexOf(tree);
        var start = markers[idx] ? markers[idx].getLatLng() : null;
        if (!start) return;
        var colors = { neighbor: '#00aa00', friend: '#0000ff' };
        (tree.neighbors || []).forEach(function(rel){
          var i = trees.findIndex(function(t){ return t.id === rel.id; });
          if (i === -1 || !markers[i]) return;
          var pos = markers[i].getLatLng();
          relationCircles.push(L.circle(pos, {radius:25,color:'#00ff00',weight:2,fillOpacity:0}).addTo(map));
          relationLines.push(L.polyline([start,pos], {color: colors.neighbor}).bindTooltip('neighbor').addTo(map));
        });
        (tree.friends || []).forEach(function(rel){
          var i = trees.findIndex(function(t){ return t.id === rel.id; });
          if (i === -1 || !markers[i]) return;
          var pos = markers[i].getLatLng();
          relationCircles.push(L.circle(pos, {radius:25,color:'#00ff00',weight:2,fillOpacity:0}).addTo(map));
          relationLines.push(L.polyline([start,pos], {color: colors.friend}).bindTooltip('friend').addTo(map));
        });
      }

      var hideDropdownTimeout = null;

      function showRelationDropdown(kind, target) {
        if (!currentTreeId) return;
        var tree = trees.find(function(t){ return t.id === currentTreeId; });
        if (!tree) return;
        var items = kind === 'neighbor' ? (tree.neighbors || []) :
                    (kind === 'friend' ? (tree.friends || []) : (tree.same_species || []));
        relationDropdown.innerHTML = '';
        items.forEach(function(it){
          var div = document.createElement('div');
          var knownIdx = trees.findIndex(function(t){ return t.id === it.id; });
          var known = knownIdx !== -1;
          div.textContent = known ? it.name : 'unknown';
          if (known) {
            div.className = 'text-green-700 cursor-pointer hover:underline';
            div.dataset.treeId = it.id;
          } else {
            div.className = 'text-gray-400';
          }
          relationDropdown.appendChild(div);
        });
        relationDropdown.style.left = (target.offsetLeft) + 'px';
        relationDropdown.classList.remove('hidden');
      }

      function scheduleHideDropdown() {
        hideDropdownTimeout = setTimeout(function(){
          relationDropdown.classList.add('hidden');
        }, 200);
      }

      relationDropdown.addEventListener('mouseenter', function(){
        clearTimeout(hideDropdownTimeout);
      });
      relationDropdown.addEventListener('mouseleave', scheduleHideDropdown);
      relationDropdown.addEventListener('click', function(e){
        var t = e.target.closest('[data-tree-id]');
        if (t) {
          var id = parseInt(t.dataset.treeId);
          if (!isNaN(id)) highlightTreeById(id);
          relationDropdown.classList.add('hidden');
        }
      });
    trees.forEach(function(tree, idx) {
      if (tree.treedb_lat && tree.treedb_long) {
        var m = L.marker([tree.treedb_lat, tree.treedb_long]).addTo(map).bindPopup(tree.name);
        m.on('click', function(){ selectTree(idx); });
        markers[idx] = m;
      } else {
        markers[idx] = null;
      }
    });

    function highlightListItem(index) {
      document.querySelectorAll('#tree-list li').forEach(function(li) {
        li.classList.toggle('selected', Number(li.dataset.index) === index);
      });
    }

    function highlightTreeById(id) {
      var index = trees.findIndex(function(t){ return t.id === id; });
      if (index !== -1) {
        selectTree(index);
        return;
      }
      revealNewTrees([id]).then(function(){
        var idx = trees.findIndex(function(t){ return t.id === id; });
        if (idx !== -1) selectTree(idx);
      });
    }

    function zoomAndHighlightGroup(kind) {
      if (!currentTreeId) return;
      var tree = trees.find(function(t){ return t.id === currentTreeId; });
      if (!tree) return;
      clearRelationHighlights();

      var items = kind === 'neighbor' ? (tree.neighbors || []) :
                  (kind === 'friend' ? (tree.friends || []) : (tree.same_species || []));

      var latlngs = [];
      var idx = trees.indexOf(tree);
      var start = (idx !== -1 && markers[idx]) ? markers[idx].getLatLng() : null;
      if (start) { latlngs.push(start); }

      items.forEach(function(it){
        var i = trees.findIndex(function(t){ return t.id === it.id; });
        if (i === -1 || !markers[i]) return;
        var pos = markers[i].getLatLng();
        latlngs.push(pos);
        relationCircles.push(L.circle(pos, {radius:25,color:'#00ff00',weight:2,fillOpacity:0}).addTo(map));
        if (start && (kind === 'neighbor' || kind === 'friend')) {
          var color = kind === 'neighbor' ? '#00aa00' : '#0000ff';
          relationLines.push(L.polyline([start,pos], {color: color}).bindTooltip(kind).addTo(map));
        }
      });

      if (latlngs.length > 1) {
        var bounds = L.latLngBounds(latlngs).pad(0.25);
        map.fitBounds(bounds, {animate: true});
      } else if (latlngs.length === 1) {
        map.flyTo(latlngs[0], 17, {animate: true});
      }
    }

   function selectTree(index) {
     var tree = trees[index];
     if (!tree) return;

      function completeSelection() {
        highlightListItem(index);
        if (markers[index]) {
          markers[index].openPopup();
          var target = markers[index].getLatLng();
          map.flyTo(target, 17, {animate: true});
        }

        if (radiusCircle) {
          map.removeLayer(radiusCircle);
          radiusCircle = null;
        }

        if (tree.treedb_lat && tree.treedb_long) {
          radiusCircle = L.circle([tree.treedb_lat, tree.treedb_long], {
            radius: 20,
            color: '#ff0000',
            fillOpacity: 0.1
          }).addTo(map);
        }

        document.getElementById('chat-title-name').textContent = tree.name;
        document.getElementById('neighbor-count').textContent =
          tree.neighbor_known + '/' + tree.neighbor_total;
        document.getElementById('friend-count').textContent =
          tree.friend_known + '/' + tree.friend_total;
        document.getElementById('species-count').textContent =
          tree.species_known + '/' + tree.species_total;
        currentTreeId = tree.id;
        updateBackButton();
        tree.user_tags = tree.user_tags || [];
        renderTags(tree.tag_counts || {}, tree.user_tags || []);
        chatHistory = [];
        currentChatId = null;
        historyDiv.innerHTML = '';

        fetch('/trees/' + currentTreeId + '/chat')
          .then(function(resp) { return resp.json(); })
          .then(function(data) {
            currentChatId = data.chat_id;
            chatHistory = [];
            historyDiv.innerHTML = '';
            (data.messages || []).forEach(function(msg) {
              var div = document.createElement('div');
              div.className = msg.role === 'user' ? 'user-message' : 'bot-message';
              if (msg.role === 'assistant') {
                renderBotMessage(div, msg.content);
              } else {
                div.textContent = msg.content;
              }
              chatHistory.push({ role: msg.role, content: msg.content, div: div });
              historyDiv.appendChild(div);
            });
            historyDiv.scrollTop = historyDiv.scrollHeight;
            refreshCurrentTree();
          });
      }

      if (currentTreeId && currentTreeId !== tree.id) {
        lastTreeId = currentTreeId;
        var fromIdx = trees.findIndex(function(t){ return t.id === currentTreeId; });
        if (fromIdx !== -1 && markers[fromIdx] && markers[index]) {
          var fromLatLng = markers[fromIdx].getLatLng();
          var targetLatLng = markers[index].getLatLng();
          var bounds = L.latLngBounds([fromLatLng, targetLatLng]).pad(0.25);
          map.flyToBounds(bounds, {animate: true});
          map.once('zoomend', function(){
            showRelationHighlights();
            setTimeout(function(){
              clearRelationHighlights();
              completeSelection();
            }, 50);
          });
          return;
        }
      }

      clearRelationHighlights();
      completeSelection();
      
    }

    document.querySelectorAll('#tree-list li').forEach(function(li){
      li.addEventListener('click', function(){
        var index = Number(li.dataset.index);
        selectTree(index);
      });
    });
    if (backButton) {
      backButton.addEventListener('click', function(){
        if (!lastTreeId) return;
        var idx = trees.findIndex(function(t){ return t.id === lastTreeId; });
        if (idx !== -1) selectTree(idx);
      });
    }
    var tagDropdownBtn = document.getElementById('tag-dropdown-btn');
    var tagDropdown = document.getElementById('tag-dropdown');
    tagDropdownBtn.addEventListener('click', function(){
      tagDropdown.classList.toggle('hidden');
    });
    document.querySelectorAll('.tag-option').forEach(function(opt){
      opt.addEventListener('click', function(){
        if (!currentTreeId) return;
        addTag(opt.dataset.tag);
        tagDropdown.classList.add('hidden');
      });
    });

    neighborInfo.addEventListener('mouseenter', function(e){
      clearTimeout(hideDropdownTimeout);
      showRelationDropdown('neighbor', neighborInfo);
    });
    neighborInfo.addEventListener('mouseleave', scheduleHideDropdown);
    neighborInfo.addEventListener('click', function(){
      zoomAndHighlightGroup('neighbor');
    });

    speciesInfo.addEventListener('mouseenter', function(e){
      clearTimeout(hideDropdownTimeout);
      showRelationDropdown('species', speciesInfo);
    });
    speciesInfo.addEventListener('mouseleave', scheduleHideDropdown);
    speciesInfo.addEventListener('click', function(){
      zoomAndHighlightGroup('species');
    });

    friendInfo.addEventListener('mouseenter', function(e){
      clearTimeout(hideDropdownTimeout);
      showRelationDropdown('friend', friendInfo);
    });
    friendInfo.addEventListener('mouseleave', scheduleHideDropdown);
    friendInfo.addEventListener('click', function(){
      zoomAndHighlightGroup('friend');
    });
    var input = document.getElementById('chat-input');
    var historyDiv = document.getElementById('chat-history');
    historyDiv.addEventListener('click', function(e){
      if (e.target.classList.contains('tree-name')) {
        var id = parseInt(e.target.dataset.treeId);
        if (!isNaN(id)) { highlightTreeById(id); }
      }
    });
    document.getElementById('chat-submit').addEventListener('click', function(){
      var text = input.value.trim();
      if (text === '' || !currentTreeId) return;
      var userMsg = {role: 'user', content: text};
      var div = document.createElement('div');
      div.className = 'user-message';
      div.textContent = text;
      historyDiv.appendChild(div);
      chatHistory.push({ role: 'user', content: text, div: div });
      input.value = '';
      historyDiv.scrollTop = historyDiv.scrollHeight;

      console.log('Sending chat request', {
        treeId: currentTreeId,
        history: chatHistory.map(function(m){ return { role: m.role, content: m.content }; }),
        chat_id: currentChatId
      });
      fetch('/trees/' + currentTreeId + '/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': csrfToken()
        },
        body: JSON.stringify({
          history: chatHistory.map(function(m){ return { role: m.role, content: m.content }; }),
          chat_id: currentChatId
        })
      }).then(function(response){
        console.log('Streaming response...');
        if (!currentChatId) {
          currentChatId = response.headers.get('X-Chat-Id');
        }
        var reader = response.body.getReader();
        var decoder = new TextDecoder();
        var botDiv = document.createElement('div');
        botDiv.className = 'bot-message';
        historyDiv.appendChild(botDiv);
        var botContent = '';

        function renderBotContent() {
          renderBotMessage(botDiv, botContent);
        }

        function read() {
          reader.read().then(function(result){
            if (result.done) {
              var finalText = botContent.replace(/<think>[\s\S]*?<\/think>/, '');
              console.log('Completed streaming', finalText);
              chatHistory.push({ role: 'assistant', content: botContent, div: botDiv });
              recordKnownTrees(finalText);
              recordUserTags(finalText);
              refreshCurrentTree();
              return;
            }
            var chunkText = decoder.decode(result.value, {stream: true});
            console.log('Received chunk', chunkText);
            botContent += chunkText;
            renderBotContent();
            historyDiv.scrollTop = historyDiv.scrollHeight;
            read();
          });
        }
        read();
      });
    });


    input.addEventListener('keydown', function(event) {
      if (event.key === 'Enter' && event.ctrlKey) {
        event.preventDefault();
        document.getElementById('chat-submit').click();
      }
    });

    var locateIcon = document.getElementById('locate-icon');
    var locationInfo = document.getElementById('location-info');
    if (locateIcon && locationInfo) {
      locateIcon.addEventListener('click', function() {
        var lat = parseFloat(locationInfo.dataset.lat);
        var lon = parseFloat(locationInfo.dataset.long);
        if (isNaN(lat) || isNaN(lon)) return;
        map.setView([lat, lon], 17);
        if (userMarker) {
          userMarker.setLatLng([lat, lon]);
        } else {
          userMarker = L.marker([lat, lon], {icon: userIcon}).addTo(map);
        }
        if (userCircle) {
          map.removeLayer(userCircle);
          userCircle = null;
        } else {
          userCircle = L.circle([lat, lon], {
            radius: 20,
            color: '#00ff00',
            fillOpacity: 0.1
          }).addTo(map);
        }
      });
    }

    document.addEventListener('location-updated', function(e) {
      var lat = e.detail.lat;
      var lon = e.detail.lon;
      if (userMarker) {
        userMarker.setLatLng([lat, lon]);
      } else {
        userMarker = L.marker([lat, lon], {icon: userIcon}).addTo(map);
      }
    });

    if (trees.length > 0) {
      selectTree(0);
    }
  });
</script>
