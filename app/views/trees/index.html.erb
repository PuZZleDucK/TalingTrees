<div class="flex h-screen">
  <div class="flex-1 pr-4">
    <h1 class="text-2xl font-bold mb-2">Trees</h1>
    <div class="h-1/4 overflow-y-auto mb-4">
      <ul id="tree-list" class="list-none p-0 m-0">
      <% @trees.each_with_index do |tree, idx| %>
        <li data-index="<%= idx %>" class="cursor-pointer p-1">
          <%= tree.name %>
        </li>
      <% end %>
      </ul>
    </div>

    <div id="map" class="h-96"></div>
  </div>
  <div class="flex-1 flex flex-col border-l border-gray-300 pl-4">
    <div class="flex items-center mb-2">
      <span class="text-2xl mr-2">ðŸ’¬</span>
      <h2 id="chat-title" class="m-0 text-xl">Chat</h2>
    </div>
    <div id="chat-history" class="overflow-y-auto border rounded p-2 mb-2 flex-1">
      <!-- Chat messages will appear here -->
    </div>
    <div class="flex">
      <input type="text" id="chat-input" class="flex-1 border rounded p-2" placeholder="Type a message...">
      <button id="chat-submit" class="ml-2 bg-blue-500 text-white rounded px-4 py-2">Send</button>
    </div>
  </div>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<style>
  #tree-list li.selected { background-color: #e0f0ff; }
  #chat-history .user-message {
    background-color: #e0ffe0;
    padding: 5px 8px;
    border-radius: 4px;
    margin: 4px 0;
    max-width: 70%;
    display: block;
    width: fit-content;
    margin-left: auto;
  }
  #chat-history .bot-message {
    background-color: #f0e0d0;
    padding: 5px 8px;
    border-radius: 4px;
    margin: 4px 0;
    max-width: 70%;
    display: block;
    width: fit-content;
    margin-right: auto;
  }
  #chat-history details pre {
    white-space: pre-wrap;
    margin: 0;
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    var trees = <%= raw @trees.to_json(only: [:id, :name, :treedb_lat, :treedb_long]) %>;
    var first = trees[0];
    var lat = first ? first.treedb_lat : 0;
    var lng = first ? first.treedb_long : 0;
    var map = L.map('map').setView([lat, lng], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Map data Â© OpenStreetMap contributors'
    }).addTo(map);
    var markers = [];
    var currentTreeId = null;
    var chatHistory = [];
    var currentChatId = null;
    var radiusCircle = null;
    var userCircle = null;

    function distanceMeters(lat1, lon1, lat2, lon2) {
      var rad = Math.PI / 180;
      var dLat = (lat2 - lat1) * rad;
      var dLon = (lon2 - lon1) * rad;
      var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * rad) * Math.cos(lat2 * rad) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return 6371000 * c;
    }

    function countNeighbors(tree, radius) {
      return trees.filter(function(t){
        if (t === tree) return false;
        if (!t.treedb_lat || !t.treedb_long) return false;
        return distanceMeters(tree.treedb_lat, tree.treedb_long,
                              t.treedb_lat, t.treedb_long) <= radius;
      }).length;
    }

    function renderBotMessage(div, content) {
      var openIdx = content.indexOf('<think>');
      if (openIdx === -1) {
        div.textContent = content;
        return;
      }
      var closeIdx = content.indexOf('</think>', openIdx + 7);
      var before = content.slice(0, openIdx);
      div.innerHTML = '';
      if (before) div.appendChild(document.createTextNode(before));
      var details = document.createElement('details');
      var summary = document.createElement('summary');
      summary.textContent = 'LLM thoughts';
      details.appendChild(summary);
      var pre = document.createElement('pre');
      if (closeIdx === -1) {
        pre.textContent = content.slice(openIdx + 7);
        details.appendChild(pre);
        div.appendChild(details);
      } else {
        pre.textContent = content.slice(openIdx + 7, closeIdx);
        details.appendChild(pre);
        div.appendChild(details);
        var after = content.slice(closeIdx + 8);
        if (after) div.appendChild(document.createTextNode(after));
      }
    }
    trees.forEach(function(tree, idx) {
      if (tree.treedb_lat && tree.treedb_long) {
        var m = L.marker([tree.treedb_lat, tree.treedb_long]).addTo(map).bindPopup(tree.name);
        m.on('click', function(){ selectTree(idx); });
        markers[idx] = m;
      } else {
        markers[idx] = null;
      }
    });

    function highlightListItem(index) {
      document.querySelectorAll('#tree-list li').forEach(function(li) {
        li.classList.toggle('selected', Number(li.dataset.index) === index);
      });
    }

    function selectTree(index) {
      var tree = trees[index];
      if (!tree) return;
      highlightListItem(index);
      if (markers[index]) {
        markers[index].openPopup();
        map.setView(markers[index].getLatLng(), 17);
      }

      if (radiusCircle) {
        map.removeLayer(radiusCircle);
        radiusCircle = null;
      }

      var neighborCount = countNeighbors(tree, 20);
      if (tree.treedb_lat && tree.treedb_long) {
        radiusCircle = L.circle([tree.treedb_lat, tree.treedb_long], {
          radius: 20,
          color: '#ff0000',
          fillOpacity: 0.1
        }).addTo(map);
      }

      document.getElementById('chat-title').textContent =
        tree.name + ' (' + neighborCount + ' neighbors)';
      currentTreeId = tree.id;
      chatHistory = [];
      currentChatId = null;
      historyDiv.innerHTML = '';

      fetch('/trees/' + currentTreeId + '/chat')
        .then(function(resp) { return resp.json(); })
        .then(function(data) {
          currentChatId = data.chat_id;
          chatHistory = [];
          historyDiv.innerHTML = '';
          (data.messages || []).forEach(function(msg) {
            var div = document.createElement('div');
            div.className = msg.role === 'user' ? 'user-message' : 'bot-message';
            if (msg.role === 'assistant') {
              renderBotMessage(div, msg.content);
            } else {
              div.textContent = msg.content;
            }
            chatHistory.push(msg);
            historyDiv.appendChild(div);
          });
          historyDiv.scrollTop = historyDiv.scrollHeight;
        });
    }

    document.querySelectorAll('#tree-list li').forEach(function(li){
      li.addEventListener('click', function(){
        var index = Number(li.dataset.index);
        selectTree(index);
      });
    });
    var input = document.getElementById('chat-input');
    var historyDiv = document.getElementById('chat-history');
    document.getElementById('chat-submit').addEventListener('click', function(){
      var text = input.value.trim();
      if (text === '' || !currentTreeId) return;
      var userMsg = {role: 'user', content: text};
      chatHistory.push(userMsg);
      var div = document.createElement('div');
      div.className = 'user-message';
      div.textContent = text;
      historyDiv.appendChild(div);
      input.value = '';
      historyDiv.scrollTop = historyDiv.scrollHeight;

      fetch('/trees/' + currentTreeId + '/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({history: chatHistory, chat_id: currentChatId})
      }).then(function(response){
        if (!currentChatId) {
          currentChatId = response.headers.get('X-Chat-Id');
        }
        var reader = response.body.getReader();
        var decoder = new TextDecoder();
        var botDiv = document.createElement('div');
        botDiv.className = 'bot-message';
        historyDiv.appendChild(botDiv);
        var botContent = '';

        function renderBotContent() {
          renderBotMessage(botDiv, botContent);
        }

        function read() {
          reader.read().then(function(result){
            if (result.done) {
              var finalText = botContent.replace(/<think>[\s\S]*?<\/think>/, '');
              chatHistory.push({role: 'assistant', content: finalText.trimStart()});
              return;
            }
            var chunkText = decoder.decode(result.value, {stream: true});
            botContent += chunkText;
            renderBotContent();
            historyDiv.scrollTop = historyDiv.scrollHeight;
            read();
          });
        }
        read();
      });
    });


    input.addEventListener('keydown', function(event) {
      if (event.key === 'Enter' && event.ctrlKey) {
        event.preventDefault();
        document.getElementById('chat-submit').click();
      }
    });

    var locateIcon = document.getElementById('locate-icon');
    var locationInfo = document.getElementById('location-info');
    if (locateIcon && locationInfo) {
      locateIcon.addEventListener('click', function() {
        var lat = parseFloat(locationInfo.dataset.lat);
        var lon = parseFloat(locationInfo.dataset.long);
        if (isNaN(lat) || isNaN(lon)) return;
        map.setView([lat, lon], 17);
        if (userCircle) {
          map.removeLayer(userCircle);
          userCircle = null;
        } else {
          userCircle = L.circle([lat, lon], {
            radius: 20,
            color: '#00ff00',
            fillOpacity: 0.1
          }).addTo(map);
        }
      });
    }

    if (trees.length > 0) {
      selectTree(0);
    }
  });
</script>
